rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user is owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Users can read all user profiles
      allow read: if isAuthenticated();
      
      // Users can only create/update their own profile
      // But cannot set isAdmin field (only admins can modify that)
      allow create: if isOwner(userId) && 
                    (!('isAdmin' in request.resource.data) || 
                     request.resource.data.isAdmin == false);
      
      allow update: if (isOwner(userId) && 
                       (!('isAdmin' in request.resource.data) || 
                        request.resource.data.isAdmin == resource.data.isAdmin)) ||
                       isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // FAQs collection
    match /faqs/{faqId} {
      // Anyone can read active FAQs
      allow read: if resource.data.isActive == true || isAdmin();
      
      // Only admins can create, update, or delete FAQs
      allow create, update, delete: if isAdmin();
    }

    // QNA collection
    match /qna/{questionId} {
      // Anyone can read active questions
      allow read: if resource.data.isActive == true || isAdmin();
      
      // Authenticated users can create questions
      allow create: if isAuthenticated() && 
                    request.resource.data.author == request.auth.uid &&
                    request.resource.data.isActive == true;
      
      // Users can update their own questions, admins can update any
      allow update: if (isAuthenticated() && 
                       resource.data.author == request.auth.uid &&
                       request.resource.data.author == request.auth.uid) ||
                       isAdmin();
      
      // Users can delete their own questions, admins can delete any
      allow delete: if (isAuthenticated() && 
                       resource.data.author == request.auth.uid) ||
                       isAdmin();

      // Answers subcollection
      match /answers/{answerId} {
        // Anyone can read active answers
        allow read: if resource.data.isActive == true || isAdmin();
        
        // Authenticated users can create answers
        allow create: if isAuthenticated() && 
                      request.resource.data.author == request.auth.uid &&
                      request.resource.data.isActive == true;
        
        // Users can update their own answers, admins can update any
        allow update: if (isAuthenticated() && 
                         resource.data.author == request.auth.uid &&
                         request.resource.data.author == request.auth.uid) ||
                         isAdmin();
        
        // Users can delete their own answers, admins can delete any
        allow delete: if (isAuthenticated() && 
                         resource.data.author == request.auth.uid) ||
                         isAdmin();
      }
    }
    
    // Friend Posts collection
    match /friendPosts/{postId} {
      // Anyone can read active and non-expired friend posts
      // Admins can read all posts (including expired ones)
      allow read: if (resource.data.isActive == true && 
                     resource.data.expiresAt > request.time) ||
                     isAdmin();
      
      // Authenticated users can create friend posts
      allow create: if isAuthenticated() &&
                       request.resource.data.author == request.auth.uid &&
                       request.resource.data.authorName == request.auth.token.name &&
                       request.resource.data.authorPhoto == request.auth.token.picture &&
                       request.resource.data.isActive == true &&
                       request.resource.data.expiresAt > request.time;
      
      // Users can update their own posts, admins can update any
      allow update: if (isAuthenticated() && 
                       resource.data.author == request.auth.uid) ||
                       isAdmin();
      
      // Users can delete their own posts, admins can delete any
      allow delete: if (isAuthenticated() && 
                       resource.data.author == request.auth.uid) ||
                       isAdmin();
    }
    
    // Garmin products - read only (legacy)
    match /products/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}